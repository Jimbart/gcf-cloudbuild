'use strict';

// Google APIs
const { google } = require('googleapis');
const cloudresourcemanager = google.cloudresourcemanager('v1');

// Google Cloud Storage client library
const { Storage } = require('@google-cloud/storage');
const storage = new Storage();

// Moment package
const moment = require('moment');

// Custom modules
const getAuth = require('./service/authorize');
const manageProjects = require('./service/manageProjects');

// Environment variables
// Will use pub sub payload when Billing alert logic is sorted out.
/**
 * Triggered from a message on a Cloud Pub/Sub topic.
 *
 * @param {!Object} event Event payload.
 * @param {!Object} context Metadata for the event.
 */
// Sample pub/sub topic message payload processing.
// exports.helloPubSub = (event, context) => {
//   const message = event.data
//     ? Buffer.from(event.data, "base64").toString()
//     : "Hello, World";
//   console.log(message);
// };

////////////////////////////////////////////////////////////
// Main entrypoint function called by Google Cloud Function
////////////////////////////////////////////////////////////
async function sandboxProjectPubSub() {

  let sandboxProjectListinRoot = [];

  // Generate Auth Tocken
  const authClient = await getAuth.authorize();

  ///////////
  //  1st processing:
  //    Find GCP projects in the root example.com org (id=637987719999) and move them to Sandbox folder (id=97028179999).
  ///////////

  // Generate request payload, payload will only filter GCP projects that are in ACTIVE state and in the root directory (telus.com organization, id=637987714668)
  // These projects will be moved to the Sandbox Folder, id=97028179999
  const requestProject = {
    auth: authClient,
    filter: "parent.id=637987719999 lifecycleState:ACTIVE"
  };

  let responseProject;
  do {
    if (responseProject && responseProject.nextPageToken) {
      requestProject.pageToken = responseProject.nextPageToken;
    }
    responseProject = (await cloudresourcemanager.projects.list(requestProject)).data;
    const projectsPage = responseProject.projects;
    if (projectsPage) {
      for (let i = 0; i < projectsPage.length; i++) {
        sandboxProjectListinRoot.push({ "Project_ID": projectsPage[i].projectId, "Date_Created": projectsPage[i].createTime })
      }
    }
  } while (responseProject.nextPageToken);

  console.log("Number of projects to be moved to Sandbox Folder: ", sandboxProjectListinRoot.length);

  // Move the projects generated by the previous step into the Sandbox Folder, id=97028179999
  // If list is not empty (greater than 0), we move projects, else do nothing.
  if (sandboxProjectListinRoot.length > 0) {
    for (let x = 0; x < sandboxProjectListinRoot.length; x++) {
      console.log(`Moving project ${sandboxProjectListinRoot[x].Project_ID} to Sandbox folder.`);
      // Move project to Sandbox Folder
      manageProjects.moveProjectToSandboxFolder(sandboxProjectListinRoot[x].Project_ID, authClient);
    }
  }
}



// Export the main cloud function entrypoint function: sandboxProjectPubSub
module.exports.sandboxProjectPubSub = sandboxProjectPubSub;

